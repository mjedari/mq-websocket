apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: websocket
  name: websocket
  namespace: micro
spec:
  replicas: 8
  selector:
    matchLabels:
      io.kompose.service: websocket
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.service: websocket
    spec:
      containers:
      - env:
        - name: WEBSOCKET_DEBUG
          value: "true"
        - name: WEBSOCKET_SENTRY_DSN
          value: 'https://331c2f339f31410496fc86f99ec1986b@sentry.abantether.info/2'
        - name: WEBSOCKET_SENTRY_SAMPLE_RATE
          value: "0.1"
        - name: WEBSOCKET_ENVIRONMENT
          value: production
        - name: WEBSOCKET_SERVER_HOST
          value: "0.0.0.0"
        - name: WEBSOCKET_KAFKA_HOST
          value: kafka.kafka.svc.cluster.local
        - name: WEBSOCKET_KAFKA_PORT
          value: "9092"
        - name: WEBSOCKET_REDIS_HOST
          value: redis-gateway-master.redis.svc.cluster.local
        - name: WEBSOCKET_REDIS_PORT
          value: "6379"
        image: repo.abanicon.com:5050/abantheter-microservices/websocket:v1.1.0
        imagePullPolicy: "Always"
        name: app
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 512m
            memory: 512Mi
      nodeSelector:
        servicetype: micro
      imagePullSecrets:
      - name: regcred
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    io.kompose.service: websocket
  name: websocket
  namespace: micro

spec:
  ports:
  - name: "websocket-port"
    port: 8080
    targetPort: 8080
  selector:
    io.kompose.service: websocket
status:
  loadBalancer: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    certmanager.k8s.io/acme-http01-edit-in-place: "false"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
        if ($request_method = 'OPTIONS') {
           add_header 'Access-Control-Allow-Origin' '$http_origin' always;
           add_header 'Access-Control-Allow-Methods' 'DELETE, GET, POST, PUT, OPTIONS, PATCH'  always;
           add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token' always;
           add_header 'Access-Control-Max-Age' 1728000 always;
           add_header 'Content-Type' 'text/plain; charset=utf-8' always;
           add_header 'Content-Length' 0;
           add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,Authorization' always;
           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,token,Authorization' always;
           add_header 'Access-Control-Allow-Credentials' 'true' always;
           return 204;
        }
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'PATCH, DELETE, GET, POST, PUT, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,token,Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

  name: websocket
  namespace: micro
spec:
  ingressClassName: nginx
  rules:
  - host: ws.abantether.com
    http:
      paths:
      - backend:
          service:
            name: websocket
            port:
              number: 8080
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - ws.abantether.com
    secretName: ws-abantether-general-tls
